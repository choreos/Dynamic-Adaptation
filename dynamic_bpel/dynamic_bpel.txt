Dynamic Partner Link
http://www.oracle.com/technetwork/articles/carey-090553.html

#1
define-se partnerLink com partnerLinkType genérico, sendo que no partnerLinkType, faz-se o partnerLinktType apontar para um WSDL no qual haverá várias tags service's que representam as opções disponíveis.

Dúvida: nesse caso a engine BPEL seleciona um dos serviços disponíveis?

#2
Usuário fornece entrada dizendo qual serviço utilizar
Neste caso, temos um assign de um XML representando um EndpointReference para uma variável BPEL (EndpointReference define ServiceName e Address). Depois essa variável é atribuída ao partnerLink.

Obs: aqui ainda precisamos definir o endereço do serviço em tempo de design.
Se não definirmos o Address no Assign, será utilizado o endereço definido no Service do WSDL (o relação será feito pelo valor de ServiceName)

Dúvida: como fazer essa última atribuição? [código]
 Figura 5, não explicado direito...
 Ah, mais em baixo:
   <assign name="DoPartnerlink">
      <copy>
        <from variable="partnerReference"/>
        <to partnerLink="LoanService"/> <!-- é diretão mesmo! -->
      </copy>
    </assign>

#3
WSDL independent
Da mesma forma que no exemplo anterior vimos que podíamos definir o ServiceName sem o Address, podemos também definir o Address sem o ServiceName, de forma que o serviço invocado será o definido no Address, que não terá relação nenhum com o WSDL.
Mas se o Service do WSDL contiver um Service, seu endereço será um default para caso a invocação do serviço seja feito sem a atribuição que definimos no parágrafo anterior.

#4
Chamando vários serviços...
útil no caso do supermercado: o loop que itera os supermercados existentes pode ficar no BPEL, e não na implementação de um serviço!
Não que isso fique bonito =P

Obs: uma vez feita as chamadas, é preciso esperar as respostas!
It is not recommended to proceed out of the <receive> while loop until all of asynchronous responses have been collected. 
~> pode ser um problema para a large scale

CONCLUSÕES

"In essence, the **endpoint reference** is a dynamic alternative to the static service element defined in the WSDL."

Estudar: WS-Addressing

Neste tutorial não há a noção de "papel".

Possível experimento:
One application of this technique is in building a framework for exception handling. If you have more than one available address where a given service is available (such as a local server and a remote redundant server), you can roll-over to the secondary address when a call to the primary fails by using an exception handler to override the address information in the endpoint reference and retry the invocation of the service. 

===============

Anotações extras

"In essence, the endpoint reference is a dynamic alternative to the static service element defined in the WSDL."

"It is important to define this **template interface** carefully because a **change** here can affect many processes down the line."
OMG! no agile here… =/

"The DynamicPartnerLink process basically consists of a switch. It inspects the "provider" string passed in by the caller. Then, it assigns an EndpointReference xml data structure to the partnerReference variable containing the information relevant to the service that you're requesting. After the switch, **the partnerReference variable is assigned to the LoanService partner link** and the partner link is invoked."

* Como funfa o BPEL estático
INVOKE invoca uma operação de um PARTNER_LINK. Este PARTNER_LINK possui um PARTNER_LINK_TYPE, que por sua vez efetua a associação de um ROLE a um PORT_TYPE. Este PORT_TYPE está declarado no WSDL e associado pelo BINDING ao protcolo SOAP. Ainda no WSDL, o PORT do SERVICE é que faz a associação entre o BINDING feito e o endereço real do serviço (soap: address location=URI).




